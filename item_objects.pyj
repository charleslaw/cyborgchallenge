import model_objects
import game_exceptions

DIRDXY = {
    'N': [ 0, -1],
    'S': [ 0,  1],
    'E': [ 1,  0],
    'W': [-1,  0]
}
TURN_DICT = {
    'N': {
        'L': 'W',
        'R': 'E',
        'F': 'N',
        'B': 'S'
    },
    'S': {
        'L': 'E',
        'R': 'W',
        'F': 'S',
        'B': 'N'
    },
    'W': {
        'L': 'S',
        'R': 'N',
        'F': 'W',
        'B': 'E'
    },
    'E': {
        'L': 'N',
        'R': 'S',
        'F': 'E',
        'B': 'W'
    }
}

class Item(GameObject):
    def __init__(self):
        self.avoid_list = []
        self.unenterable = []
        self.push_list = []
        self.items = {}
        self.immunities = []
        self.can_push_on_walls = False
        
        #Considered saving the index, but that would require a lot of work
        # to keep updated.  
        self.is_slipping = False

    def check_map_bound(self, new_x, new_y):
        #check if the new position is in a map
        if new_x > (LEVELSIZE-1):
            return False
        elif new_x < 0:
            return False
        if new_y > (LEVELSIZE-1):
            return False
        elif new_y < 0:
            return False

        return True

    def set_item_pos(self, items, old_x, old_y, new_x, new_y):
        items[new_x][new_y] = items[old_x][old_y]
        items[old_x][old_y] = None

    def valid_move(self, start_x, start_y, direction, slip_ind, test=False):
        """
        Move an item from start_x, start_y by dx, dy.
        Note that it does not update the sliplist.  Note that monsters cannot
        move themselves when on the sliplist.
        """
        #Check the change is in bounds
        dx, dy = DIRDXY[direction]
        new_x = start_x + dx
        new_y = start_y + dy

        valid_move = self.check_map_bound(new_x, new_y)
        if not valid_move:
            return False, start_x, start_y
        
        #see what direction the map wants the player to move
        # leavable checks if the new position is enterable
        map = self.game_engine.map
        curr_floor = map[start_x][start_y]
        valid_move = curr_floor.leavable(start_x, start_y, new_x, new_y,
                                         direction)
        
        if not valid_move:
            return False, start_x, start_y
        
        #See if this creature can enter this type of flooring
        dest_floor = map[new_x][new_y]
        for unenterabe_class in self.unenterable:
            if dest_floor instanceof unenterabe_class:
                return False, start_x, start_y

        items = self.game_engine.items
        neighbors_ok = self.move_neighbors(new_x, new_y, direction,
                                           map, items, test=test)
        if neighbors_ok:
            if test:
                return True, new_x, new_y
            #could raise a PlayerKilled or MonsterKilled
            self.step_on_item(items[new_x][new_y], new_x, new_y)
            new_floor = map[new_x][new_y]

            #Move the new item onto the box
            self.set_item_pos(items, start_x, start_y, new_x, new_y)
            
            #This is for monsters
            #TODO: How does this work with slips (dest_x, dest_y)?
            #NOTE: creature_link can be 0
            if self.creature_link is not None:
                self.game_engine.creature_links[self.creature_link] = new_x, new_y

            dest_x, dest_y = map[new_x][new_y].enter(new_x, new_y,
                                                     direction, self)
            is_slippery = new_floor.slip_item(self)
            if is_slippery:
                s_direction = new_floor.get_slip_direction(direction)
                if slip_ind == None:
                    self.add_to_sliplist(slip_ind, dest_x, dest_y, s_direction)
                else:
                    self.update_sliplist(slip_ind, dest_x, dest_y, s_direction)
            elif slip_ind != None:
                self.remove_from_sliplist(slip_ind)

            #Do not use self, item may be deleted (and the value may be None)
            if dest_x != new_x or dest_y != new_y:
                self.set_item_pos(items, new_x, new_y, dest_x, dest_y)

            return True, dest_x, dest_y
        else:
            #TODO: Remove from the sliplist
            return False, start_x, start_y


    def move_neighbors(self, new_x, new_y, direction, map, items, test=False):
        #if there are no item in the way, the move is allowed
        if not items[new_x][new_y]:
            return True
        
        #see if the items can interact
        dest_item = items[new_x][new_y]
        interactive = True
        for untouchable_class in self.avoid_list:
            if dest_item instanceof untouchable_class:
                interactive = False
                break

        if not interactive:
            return False

        #if dest_item.is_slipping
        #find the slip_ind
        slip_ind = None

        pushable = False
        for merge_class in self.push_list:
            if isinstance(dest_item, merge_class):
                pushable = True
                break

        if pushable:
            valid_move = dest_item.valid_move(new_x, new_y, direction,
                                              slip_ind, test=test)[0]
            return valid_move
        return True
    
    def step_on_item(self, target_item, t_x, t_y):
        return None

    def add_inventory(self, item_name, item):
        console.log('Not Implemented')
        return
    
    def check_inventory(self, item_name, count):
        console.log('Not Implemented')
        return False
    
    def use_item(self, item_name):
        console.log('Not Implemented')
        return

    def clear_boots(self):
        pass

    def is_safe(type, item):
        console.log('Not Implemented')
        return False
    
    def burn(self, pos_x, pos_y):
        console.log('Not Implemented')
        return
    
    def set_new_direction(self, direction):
        return
            
    def drown(self, pos_x, pos_y):
        console.log('Not Implemented')
        return
        
    def is_safe(self, dmg_type, item):
        if self.immunities.indexOf(dmg_type) >= 0:
            return True
        elif self.check_inventory(item, 1):
            return True
        else:
            return False

    def update_sliplist(self, index, pos_x, pos_y, direction):
        self.is_slipping = True
        self.game_engine.slip_list[index] = (pos_x, pos_y, direction)

    def add_to_sliplist(self, index, pos_x, pos_y, direction):
        """
        if index is None, 
        """
        self.is_slipping = True
        self.game_engine.slip_list.push((pos_x, pos_y, direction))

    def remove_from_sliplist(self, index):
        self.game_engine.slip_list.splice(index, 1)
        self.is_slipping = False

    def kill(self, msg, pos_x, pos_y):
        #By default do nothing
        return

class Block(Item):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.is_slipping = False
        self.avoid_list = [Block]
        self.game_engine = game_engine

    def step_on_item(self, target_item, t_x, t_y):
        if (target_item instanceof Player):
            raise PlayerKilled("block crushed player")
        if (target_item instanceof Monster):
            self.game_engine.kill_monster(t_x, t_y)
        return None
        

    def burn(self, pos_x, pos_y):
        #do nothing blocks are not affected by fire
        return
    
    def drown(self, pos_x, pos_y):
        #this drowns the block - makes dirt
        self.game_engine.map[pos_x][pos_y] = object_generator(11, self.game_engine.images, self.game_engine)
        self.game_engine.items[pos_x][pos_y] = None


class Creature(Item):
    def __init__(self):
        pass
    
    def add_inventory(self, item_name, item):
        item_count = self.items[item_name]
        if type(item_count) is "undefined":
            self.items[item_name] = 0
        
        self.items[item_name] += 1
    
    def check_inventory(self, item_name, count):
        item_count = self.items[item_name]
        has_items = False
        if type(item_count) is not "undefined" and \
                self.items[item_name] >= count:
            has_items = True
        return has_items
    
    def use_item(self, item_name):
        self.items[item_name] -= 1
    

    def burn(self, pos_x, pos_y):
        if not self.is_safe('FIRE', 'INV_FIREBOOTS'):
            #kill the unit
            self.game_engine.items[pos_x][pos_y] = None
            
    def drown(self, pos_x, pos_y):
        if not self.is_safe('WATER', 'INV_FLIPPERS'):
            #kill the unit
            self.game_engine.items[pos_x][pos_y] = None
            raise MonsterKilled('drowned')

class Player(Creature):
    """
    #51    Drowning Chip                       0    0
    #52    Burned Chip                         0    0
    #53    Burned Chip(2)                      0    0
    #57    Chip in Exit - end game             0    0
    #60    Chip Swimming (N)                   1    0
    #61    Chip Swimming (W)                   1    0
    #62    Chip Swimming (S)                   1    0
    #63    Chip Swimming (E)                   1    0
    #108    Chip (N)                          1    1
    #109    Chip (W)                          1    1
    #110    Chip (S) (Always used)            1    1
    #111    Chip (E)                          1    1
    """
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.push_list = [Block]
        self.avoid_list = []
        self.can_push_on_walls = True
        self.items = {}
        self.is_slipping = False
        self.game_engine = game_engine

    def set_item_pos(self, items, old_x, old_y, new_x, new_y):
        items[new_x][new_y] = items[old_x][old_y]
        items[old_x][old_y] = None
        self.game_engine.x = new_x
        self.game_engine.y = new_y

    def valid_move(self, start_x, start_y, direction, slip_ind, test=False):
        if slip_ind == None and self.is_slipping:
            #Player is always at slipind 0
            slip_ind = 0
        return Item.valid_move(self, start_x, start_y, direction,
                               slip_ind, test=test)

    def set_inventory_icon(self, item_name, item):
        """
        Only set the item if the item_count is non-zero
        """
        if item and self.items[item_name] > 0:
            #this is a key, strip the KEY_ portion of the string and lowercase the rest
            key_name = item_name.toLowerCase()
            key_div = document.getElementById(key_name)
            key_div.style.backgroundImage = 'url(' + item.img.src + ')'
        elif self.items[item_name] == 0:
            key_name = item_name.toLowerCase()
            key_div = document.getElementById(key_name)
            key_div.style.backgroundImage = ''

    def add_inventory(self, item_name, item):
        Creature.add_inventory(self, item_name, item)

        #the UI shows user keys
        #Note: this [0:4] works in JS but not Python
        if item_name[:4] == 'KEY_' or item_name[:4] == 'INV_':
            self.set_inventory_icon(item_name, item)

    def clear_boots(self):
        """
        Just clear all boots
        """
        for item in ['INV_FIREBOOTS', 'INV_FLIPPERS', 'INV_SKATES', 'INV_SUCTIONBOOTS']:
            self.items[item] = 0
            self.set_inventory_icon(item, None)

    def use_item(self, item_name):
        Creature.use_item(self, item_name)
        
        if item_name[:4] == 'KEY_' or item_name[:4] == 'INV_':
            self.set_inventory_icon(item_name, null)

    def burn(self, pos_x, pos_y):
        if not self.is_safe('FIRE', 'INV_FIREBOOTS'):
            #kill the unit
            raise PlayerKilled('Burned')
            
    def drown(self, pos_x, pos_y):
        if not self.is_safe('WATER', 'INV_FLIPPERS'):
            #kill the unit
            raise PlayerKilled('Drowned')

    def step_on_item(self, target_item, t_x, t_y):
        if (target_item instanceof Monster):
            raise PlayerKilled("player stepped on monster")
        return None

    def add_to_sliplist(self, index, pos_x, pos_y, direction):
        """
        if index is None, add to the list
        """
        self.is_slipping = True
        #unshift is like insert(0, item)
        self.game_engine.slip_list.unshift((pos_x, pos_y, direction))

    def kill(self, msg, pos_x, pos_y):
        raise PlayerKilled(msg)


class Monster(Creature):
    """
    #Monsters
    #64    Bug (N)                             1    0
    #65    Bug (W)                             1    0
    #66    Bug (S)                             1    0
    #67    Bug (E)                             1    0
    #68    Fire Bug (N)                        1    0
    #69    Fire Bug (W)                        1    0
    #70    Fire Bug (S)                        1    0
    #71    Fire Bug (E)                        1    0
    #72    Pink Ball (N)                       1    0
    #73    Pink Ball (W)                       1    0
    #74    Pink Ball (S)                       1    0
    #75    Pink Ball (E)                       1    0
    #76    Tank (N)                            1    0
    #77    Tank (W)                            1    0
    #78    Tank (S)                            1    0
    #79    Tank (E)                            1    0
    #80    Ghost (N)                           1    0
    #81    Ghost (W)                           1    0
    #82    Ghost (S)                           1    0
    #83    Ghost (E)                           1    0
    #84    Frog (N)                            1    0
    #85    Frog (W)                            1    0
    #86    Frog (S)                            1    0
    #87    Frog (E)                            1    0
    #88    Dumbbell (N)                        1    0
    #89    Dumbbell (W)                        1    0
    #90    Dumbbell (S)                        1    0
    #91    Dumbbell (E)                        1    0
    #92    Blob (N)                            1    0
    #93    Blob (W)                            1    0
    #94    Blob (S)                            1    0
    #95    Blob (E)                            1    0
    #96    Centipede (N)                       1    0
    #97    Centipede (W)                       1    0
    #98    Centipede (S)                       1    0
    #99    Centipede (E)                       1    0
    """
    def __init__(self):
        #TODO: Remove collision_list
        self.collision_list = [Creature]
        self.unenterable = [Dirt, Gravel, Fire, Chip, PassWall]
        self.avoid_list = [Block]

    def valid_move(self, start_x, start_y, direction, slip_ind, test=False):
        valid_move, new_x, new_y = Item.valid_move(self, start_x, start_y,
                                                   direction, slip_ind,
                                                   test=test)
        if valid_move:
            self.game_engine.creature_links[self.creature_link] = new_x, new_y
        return valid_move, new_x, new_y


    def move(self, start_x, start_y):
        if self.is_slipping:
            return start_x, start_y
        turn_dict_current = TURN_DICT[self.direction]
        for turn_direction in self.turn_priority:
            #map the turn direction to a absolute direction
            abs_turn_direction = turn_dict_current[turn_direction]
            is_valid, new_x, new_y = self.valid_move(start_x, start_y,
                                                     abs_turn_direction, None)
            if is_valid:
                self.set_new_direction(abs_turn_direction)
                return new_x, new_y
        return start_x, start_y

    def kill(self, msg, pos_x, pos_y):
        # self.game_engine.items[pos_x][pos_y] = None
        raise MonsterKilled(msg)
        
    def step_on_item(self, target_item, t_x, t_y):
        if (target_item instanceof Player):
            raise PlayerKilled("Monster killed player")
        return None


class Bug(Monster):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.avoid_list = [Block, Bug]
        self.game_engine = game_engine

        #Make this better (maybe a constant?)
        self.direction_map = {
            'N': 64,
            'W': 65,
            'S': 66,
            'E': 67
        }
        self.image_set = images

        direction = None
        #TODO: Something more backwards compatible
        for key in Object.keys(self.direction_map):
            if self.direction_map[key] == type_index:
                direction = key
                break
        self.set_new_direction(direction)
        self.turn_priority = ['L', 'F', 'R', 'B']

    def set_new_direction(self, direction):
        type_index = self.direction_map[direction]
        self.direction = direction
        self.img = self.image_set[type_index]


class FireBug(Monster):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.immunities = ['FIRE']
        self.bg_img = bg_img
        self.game_engine = game_engine
        self.avoid_list = [Block, FireBug]
        self.unenterable = [Dirt, Gravel, Chip]

        #Make this better (maybe a constant?)
        self.direction_map = {
            'N': 68,
            'W': 69,
            'S': 70,
            'E': 71
        }
        self.image_set = images

        direction = None
        #TODO: Something more backwards compatible
        for key in Object.keys(self.direction_map):
            if self.direction_map[key] == type_index:
                direction = key
                break
        self.set_new_direction(direction)
        self.turn_priority = ['F', 'L', 'R', 'B']

    def set_new_direction(self, direction):
        type_index = self.direction_map[direction]
        self.direction = direction
        self.img = self.image_set[type_index]


class PinkBall(Monster):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.game_engine = game_engine
        self.avoid_list = [Block, PinkBall]

        #Make this better (maybe a constant?)
        self.direction_map = {
            'N': 72,
            'W': 73,
            'S': 74,
            'E': 75
        }
        self.image_set = images

        direction = None
        #TODO: Something more backwards compatible
        for key in Object.keys(self.direction_map):
            if self.direction_map[key] == type_index:
                direction = key
                break
        self.set_new_direction(direction)
        self.turn_priority = ['F', 'B']

    def set_new_direction(self, direction):
        type_index = self.direction_map[direction]
        self.direction = direction
        self.img = self.image_set[type_index]


class Tank(Monster):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.game_engine = game_engine
        self.avoid_list = [Block, Tank]

        #Make this better (maybe a constant?)
        self.direction_map = {
            'N': 76,
            'W': 77,
            'S': 78,
            'E': 79
        }
        self.image_set = images

        self.state = 0 #0=still, 1=turning, 2=moving

        direction = None
        #TODO: Something more backwards compatible
        for key in Object.keys(self.direction_map):
            if self.direction_map[key] == type_index:
                direction = key
                break
        self.set_new_direction(direction)
        self.fin_direction = direction
        self.clicked = True

    def set_new_direction(self, direction):
        type_index = self.direction_map[direction]
        self.direction = direction
        self.img = self.image_set[type_index]

    def trigger(self):
        #turn the object instantly
        new_direction = TURN_DICT[self.direction]['L']
        fin_direction = TURN_DICT[new_direction]['L']
        self.set_new_direction(new_direction)
        self.fin_direction = fin_direction
        self.clicked = True

    def move(self, start_x, start_y):
        if not self.clicked:
            return start_x, start_y

        if self.new_direction != self.fin_direction:
            self.set_new_direction(self.fin_direction)

        #try to move
        #Assume click was turned off
        self.clicked = False
        is_valid, new_x, new_y = self.valid_move(start_x, start_y,
                                                 self.fin_direction, None)
        if is_valid:
            #Still valid, so keep the tank moving
            self.clicked = True
        return new_x, new_y


class Ghost(Monster):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.game_engine = game_engine
        self.avoid_list = [Block, Ghost]

        #Make this better (maybe a constant?)
        self.direction_map = {
            'N': 80,
            'W': 81,
            'S': 82,
            'E': 83
        }
        self.image_set = images

        direction = None
        #TODO: Something more backwards compatible
        for key in Object.keys(self.direction_map):
            if self.direction_map[key] == type_index:
                direction = key
                break
        self.set_new_direction(direction)
        self.turn_priority = ['F', 'L', 'R', 'B']

    def set_new_direction(self, direction):
        type_index = self.direction_map[direction]
        self.direction = direction
        self.img = self.image_set[type_index]


class Frog(Monster):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.game_engine = game_engine
        self.img = images[type_index]

class Walker(Monster):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.game_engine = game_engine
        self.img = images[type_index]

class Blob(Monster):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.game_engine = game_engine
        self.img = images[type_index]

class Centipede(Monster):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.game_engine = game_engine
        self.avoid_list = [Block, Centipede]

        #Make this better (maybe a constant?)
        self.direction_map = {
            'N': 96,
            'W': 97,
            'S': 98,
            'E': 99
        }
        self.image_set = images

        direction = None
        #TODO: Something more backwards compatible
        for key in Object.keys(self.direction_map):
            if self.direction_map[key] == type_index:
                direction = key
                break
        self.set_new_direction(direction)
        self.turn_priority = ['R', 'F', 'L', 'B']

    def set_new_direction(self, direction):
        type_index = self.direction_map[direction]
        self.direction = direction
        self.img = self.image_set[type_index]
