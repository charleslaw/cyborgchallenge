#   Copyright 2012 Charles Law (charles.law@gmail.com)
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

import model_objects

direction_dpos_dict = {'UP':    [ 0, -1],
                       'DOWN':  [ 0,  1],
                       'LEFT':  [-1,  0],
                       'RIGHT': [ 1,  0]}


FPS = 20 #20 supports "boosting" @ 20 moves/sec
FRAMES_PER_SLIDE = 2 #20 f/s / 10m/s = 2 frames
FRAMES_PER_REG = 4 #20 f/s / 5m/s = 4 frames
BLOCK_DIM = 48 #pixels per block
NUM_BLOCKS = 9 #Number of blocks on the screen
PLAYERPOS = 4 #(Num_blocks-1)/2
LEVELSIZE = 32 #LEVEL PARAMETERS

PLAYER_TYPE = 1
MONSTER_TYPE = 2


LEVEL_RUNNING = 0
DEAD = 1
FINISHED = 2


conversion_map = [Tile, Wall, Chip, Water, Fire, HiddenWall, BlockedNorth, \
    BlockedWest, BlockedSouth, BlockedEast, Block, Dirt, Ice, ForceSouth, \
    CloneNorth, CloneWest, CloneSouth, CloneEast, ForceNorth, ForceEast, \
    ForstWest, Exit, DoorBlue, DoorRed, DoorGreen, DoorYellow, IceSE, \
    IceSW, IceNW, IceNE, BlueNone, BlueWall, None, Theif, Socket, \
    ButtonGreen, ButtonRed, SwitchedWall, SwitchedNone, ButtonBrown, \
    ButtonBlue, Teleport, Bomb, Trap, SemiHiddenWall, Gravel, PassWall, \
    Hint, BlockedSE, Cloner, ForceAll, Player, Player, Player, None, None, \
    None, Player, Exit, Exit, Player, Player, Player, Player, Bug, Bug, Bug, \
    Bug, FireBug, FireBug, FireBug, FireBug, PinkBall, PinkBall, PinkBall, \
    PinkBall, Tank, Tank, Tank, Tank, Ghost, Ghost, Ghost, Ghost, Frog, Frog, \
    Frog, Frog, Walker, Walker, Walker, Walker, Blob, Blob, Blob, Blob, \
    Centipede, Centipede, Centipede, Centipede, KeyBlue, KeyRed, KeyGreen, \
    KeyYellow, Flippers, FireBoots, Skates, SuctionBoots, Player, Player, \
    Player, Player]
    

image_map = ['tile1.png', 'tile2.png', 'cyb002.png', 'cyb003.png', 'cyb004.png',
    'HiddenWall', 'BlockedNorth', \
    'BlockedWest', 'BlockedSouth', 'BlockedEast', \
    'box.png', 'cyb011.png', 'cyb012.png', 'slideD.png', \
    'CloneNorth', 'CloneWest', 'CloneSouth', 'CloneEast', 'slideU.png', 'slideR.png', \
    'slideL.png', 'exit.png', 'cyb022.png', 'cyb023.png', 'cyb024.png', 'cyb025.png', 'cyb026.png', \
    'cyb027.png', 'cyb028.png', 'cyb029.png', 'BlueNone', 'BlueWall', 'None', 'Theif', 'twi034.gif', \
    'ButtonGreen', 'ButtonRed', 'SwitchedWall', 'SwitchedNone', 'ButtonBrown', \
    'ButtonBlue', 'Teleport', 'Bomb', 'Trap', 'SemiHiddenWall', 'Gravel', 'PassWall', \
    'twi047.gif', 'BlockedSE', 'Cloner', 'ForceAll', 'borg2.png', 'borg2.png', 'borg2.png', 'None', 'None', \
    'None', 'Player', 'exit.png', 'exit.png', 'borg2.png', 'borg2.png', 'borg2.png', 'borg2.png', 'Bug', 'Bug', 'Bug', \
    'Bug', 'FireBug', 'FireBug', 'FireBug', 'FireBug', 'PinkBall', 'PinkBall', 'PinkBall', \
    'PinkBall', 'Tank', 'Tank', 'Tank', 'Tank', 'Ghost', 'Ghost', 'Ghost', 'Ghost', 'Frog', 'Frog', \
    'Frog', 'Frog', 'Walker', 'Walker', 'Walker', 'Walker', 'Blob', 'Blob', 'Blob', 'Blob', \
    'Centipede', 'Centipede', 'Centipede', 'Centipede', 'twi100.gif', 'twi101.gif', 'twi102.gif', \
    'twi103.gif', 'twi104.gif', 'twi105.gif', 'twi106.gif', 'twi107.gif', 'borg2.png', 'borg2.png', \
    'borg2.png', 'borg2.png']
    
bg_image = [None, None, None, None, None,
    None, None, \
    None, None, None, \
    None, None, None, None, \
    None, None, None, None, None, None, \
    None, None, None, None, None, None, None, \
    None, None, None, None, None, None, None, None, \
    None, None, None, None, None, \
    None, None, None, None, None, None, None, \
    None, None, None, None, None, None, None, None, None, \
    None, None, None, None, None, None, None, None, None, None, None, \
    None, None, None, None, None, None, None, None, \
    None, None, None, None, None, None, None, None, None, None, None, \
    None, None, None, None, None, None, None, None, None, None, \
    None, None, None, None, 0, 0, 0, \
    0, 0, 0, 0, 0, None, None, \
    None, None]    


def object_generator(index, loaded_images):
    object_class = conversion_map[index]
    if bg_image[index] != None:
        bg_img = loaded_images[bg_image[index]]
    else:
        bg_img = None
    
    return new object_class(loaded_images[index], bg_img)


def enum_is_item(itemEnum):
    if itemEnum==10:
        return True
    elif itemEnum>59 and itemEnum<100:
        return True
    elif itemEnum>107 and itemEnum<111:
        return True
    else:
        return False

def enum_is_monster(itemEnum):
    if itemEnum>63 and itemEnum<100:
        return True
    return False


def randfloat(min, max):
    return Math.random() * (max - min) + min


def randint(min, max):
    return Math.floor(Math.random() * (max - min + 1)) + min


class Cyborg:
    def __init__(self, canvas):
        self.canvas = canvas
        

    def start_level(self, controller, start_pos, map, items, level_info, images):
        self.controller = controller
        self.x = start_pos[0]
        self.y = start_pos[1]
        self.map = map
        self.items = items
        self.images = images
        self.num_chips = level_info[1]
        self.chips_left = level_info[1]
        self.game_state = LEVEL_RUNNING


    def have_all_chips(self):
        if self.chips_left > 0:
            return False
        else:
            return True

    def get_chip(self)
        self.chips_left -= 1


    def calculate_move(self, start_x, start_y, dx, dy):
        """
        Try to move in the item in start_x, start_y by dx, dy
        Return the actual move
        """
        pass


    def move_player(self, direction):
        dx, dy = direction_dpos_dict[direction]
        player_item = self.items[self.x][self.y]
        valid_move, self.x, self.y = player_item.valid_move(self.x, self.y, dx, dy,
                                                            self.map, self.items, self)
        if self.game_state:
            if self.game_state == FINISHED:
                self.controller.new_level(True)
            elif self.game_state == DEAD:
                self.controller.new_level(False)

    def update(self):
        # Make model updates
        self.draw()


    def draw(self):
         self.refresh()

        
    def refresh(self):
        startX = Math.min( Math.max(0,self.x-PLAYERPOS), LEVELSIZE-NUM_BLOCKS)
        startY = Math.min( Math.max(0,self.y-PLAYERPOS), LEVELSIZE-NUM_BLOCKS)
        ctx = self.canvas.getContext('2d')
        ctx.save()
        
        dispx = 0
        for map_x in range(startX, startX+NUM_BLOCKS):
            dispy = 0
            for map_y in range(startY, startY+NUM_BLOCKS):
                #draw the map first
                if self.map[map_x][map_y]:
                    self.map[map_x][map_y].draw(ctx, dispx, dispy)
                if self.items[map_x][map_y]:
                    self.items[map_x][map_y].draw(ctx, dispx, dispy)
                dispy += BLOCK_DIM
            
            dispx += BLOCK_DIM
        ctx.restore()

