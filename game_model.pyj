#   Copyright 2012 Charles Law (charles.law@gmail.com)
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

import model_objects
import item_objects

direction_dpos_dict = {'UP':    'N', 'DOWN':  'S', 'LEFT':  'W', 'RIGHT': 'E'}


FRAMES_PER_SLIDE = 2 #20 f/s / 10m/s = 2 frames
FRAMES_PER_REG = 4 #20 f/s / 5m/s = 4 frames
BLOCK_DIM = 48 #pixels per block
NUM_BLOCKS = 9 #Number of blocks on the screen
PLAYERPOS = 4 #(Num_blocks-1)/2
LEVELSIZE = 32 #LEVEL PARAMETERS

PLAYER_TYPE = 1
MONSTER_TYPE = 2


LEVEL_RUNNING = 0
DEAD = 1
FINISHED = 2


conversion_map = [Tile, Wall, Chip, Water, Fire, HiddenWall, BlockedNorth, \
    BlockedWest, BlockedSouth, BlockedEast, Block, Dirt, Ice, ForceSouth, \
    CloneNorth, CloneWest, CloneSouth, CloneEast, ForceNorth, ForceEast, \
    ForstWest, Exit, DoorBlue, DoorRed, DoorGreen, DoorYellow, IceSE, \
    IceSW, IceNW, IceNE, BlueNone, BlueWall, None, Theif, Socket, \
    ButtonGreen, ButtonRed, SwitchedWall, SwitchedWall, ButtonBrown, \
    ButtonBlue, Teleport, Bomb, Trap, SemiHiddenWall, Gravel, PassWall, \
    Hint, BlockedSE, Cloner, ForceAll, Player, Player, Player, None, None, \
    None, Player, Exit, Exit, Player, Player, Player, Player, Bug, Bug, Bug, \
    Bug, FireBug, FireBug, FireBug, FireBug, PinkBall, PinkBall, PinkBall, \
    PinkBall, Tank, Tank, Tank, Tank, Ghost, Ghost, Ghost, Ghost, Frog, Frog, \
    Frog, Frog, Walker, Walker, Walker, Walker, Blob, Blob, Blob, Blob, \
    Centipede, Centipede, Centipede, Centipede, KeyBlue, KeyRed, KeyGreen, \
    KeyYellow, Flippers, FireBoots, Skates, SuctionBoots, Player, Player, \
    Player, Player]
    

image_map = ['tile1.png', 'tile2.png', 'cyb002.png', 'cyb003.png', 'cyb004.png',
    'tile1.png', 'BlockedNorth', \
    'BlockedWest', 'cyb008.png', 'BlockedEast', \
    'box.png', 'cyb011.png', 'cyb012.png', 'slideD.png', \
    'CloneNorth', 'CloneWest', 'CloneSouth', 'CloneEast', 'slideU.png', 'slideR.png', \
    'slideL.png', 'exit.png', 'cyb022.png', 'cyb023.png', 'cyb024.png', 'cyb025.png', 'cyb026.png', \
    'cyb027.png', 'cyb028.png', 'cyb029.png', 'cyb030.png', 'cyb030.png', 'None', 'cyb033.png', 'cyb034.gif', \
    'cyb035.png', 'cyb036.png', 'cyb037.png', 'cyb038.png', 'cyb039.png', \
    'cyb040.png', 'cyb041.png', 'cyb042.png', 'cyb043.png', 'tile1.png', 'cyb045.gif', 'cyb046.png', \
    'cyb047.png', 'BlockedSE', 'cyb049.gif', 'ForceAll', 'borg2.png', 'borg2.png', 'borg2.png', 'None', 'None', \
    'None', 'Player', 'exit.png', 'exit.png', 'borg2.png', 'borg2.png', 'borg2.png', 'borg2.png', 'cyb064.png', \
    'cyb065.png', 'cyb066.png', 'cyb067.png', 'cyb068.png', 'cyb069.png', \
    'cyb070.png', 'cyb071.png', 'cyb072.png', 'cyb073.png', 'cyb074.png', \
    'cyb075.png', 'cyb076.png', 'cyb077.png', 'cyb078.png', 'cyb079.png', \
    'cyb080.png', 'cyb081.png', 'cyb082.png', 'cyb083.png', 'Frog', 'Frog', \
    'Frog', 'Frog', 'Walker', 'Walker', 'Walker', 'Walker', 'Blob', 'Blob', 'Blob', 'Blob', \
    'cyb096.png', 'cyb097.png', 'cyb098.png', 'cyb099.png', 'cyb100.gif', 'cyb101.gif', 'cyb102.gif', \
    'cyb103.gif', 'cyb104.png', 'cyb105.png', 'cyb106.png', 'cyb107.png', 'borg2.png', 'borg2.png', \
    'borg2.png', 'borg2.png']
    
bg_image = [None, None, None, None, None,
    None, None, \
    None, None, None, \
    None, None, None, None, \
    None, None, None, None, None, None, \
    None, None, None, None, None, None, None, \
    None, None, None, None, None, None, None, None, \
    0, None, None, None, None, \
    0, None, None, None, None, None, None, \
    None, None, None, None, None, None, None, None, None, \
    None, None, None, None, None, None, None, None, None, None, None, \
    None, None, None, None, None, None, None, None, \
    None, None, None, None, None, None, None, None, None, None, None, \
    None, None, None, None, None, None, None, None, None, None, \
    None, None, None, None, 0, 0, 0, \
    0, 0, 0, 0, 0, None, None, \
    None, None]    


def object_generator(index, loaded_images, game_model):
    object_class = conversion_map[index]
    if bg_image[index] != None:
        bg_img = loaded_images[bg_image[index]]
    else:
        bg_img = None
    
    return new object_class(index, loaded_images, bg_img, game_model)


def enum_is_item(itemEnum):
    if itemEnum==10:
        return True
    elif itemEnum>59 and itemEnum<100:
        return True
    elif itemEnum>107 and itemEnum<111:
        return True
    else:
        return False

def enum_is_monster(itemEnum):
    if itemEnum>63 and itemEnum<100:
        return True
    return False


def randfloat(min, max):
    return Math.random() * (max - min) + min


def randint(min, max):
    return Math.floor(Math.random() * (max - min + 1)) + min


class Cyborg:
    def __init__(self, canvas):
        self.canvas = canvas
        

    def end_game(self):
        Alertify.dialog.alert(
            "Thank you for playing!<br><br>Written by Charles Law<br>Check " + \
            "out other projects I work on:<br>" + \
            "<a href=\"http://www.grafpad.com\" target=\"_blank\">Grafpad</a><br>" + \
            "<a href=\"http://rapydscript.pyjeon.com\" target=\"_blank\">RapydScript</a>",
            def ():
                self.controller._start_game()
            )

    def start_level(self, controller, start_pos, map, items, level_info, images, links, creature_links, trap_controls, clone_controles):
        self.controller = controller
        self.x = start_pos[0]
        self.y = start_pos[1]
        self.map = map
        self.items = items
        self.images = images
        self.num_chips = level_info[1]
        self.chips_left = level_info[1]
        self.game_state = LEVEL_RUNNING
        self.links = links
        self.creature_links = creature_links
        trap_controls = trap_controls
        clone_controles = clone_controles
        self.slip_list = []

        self._set_creature_links()
        self.set_chips_text()
        self.reset_inventory_ui()
        
        #setup controls
        for but_x, but_y, trap_x, trap_y in trap_controls:
            self.map[but_x][but_y].set_trap(trap_x, trap_y)
        for but_x, but_y, trap_x, trap_y in clone_controles:
            self.map[but_x][but_y].set_trap(trap_x, trap_y)
        
        player_item = self.items[self.x][self.y]
        inv_items = ['key_red', 'key_green']
        for inv_item in inv_items:
            player_item.set_inventory_icon(inv_item, undefined)

    def is_player_sliding(self):
        """
        See if the player is sliding
        """
        return self.items[self.x][self.y].is_slipping

    def _set_creature_links(self):
        """
        Goes through the creature link list and set on the monster
        """
        for i in range(len(self.creature_links)):
            pos_x, pos_y = self.creature_links[i]
            self.items[pos_x][pos_y].creature_link = i

    def kill_monster(self, x, y):
        """
        Right now this only supports a player killing a monster
        """
        #Find monster in creature_links & remove
        found_moving_monster = False
        for i in range(len(self.creature_links)-1, -1, -1):
            pos_x, pos_y = self.creature_links[i]
            if pos_x == x and pos_y == y:
                #Remove this item
                self.creature_links.splice(i, 1)
                found_moving_monster = True
        if found_moving_monster:
            self._set_creature_links()

        #Remove from the sliplist as well
        for i in range(len(self.slip_list)-1, -1, -1):
            pos_x, pos_y = self.slip_list[i][0:2]
            if pos_x == x and pos_y == y:
                #Remove this item
                console.log('kill monster s'+i)
                self.slip_list.splice(i, 1)
        
        #Now actually kill the monster
        self.items[x][y] = None

    def move_monsters(self):
        #TODO: Watch for the case where the moving monster kills another monster
        #Notes: Killing himself is easy due to how the loop not getting messed
        #up, killing a monster already moved/not yet moved is tricky though.
        #We can probably assume that only 1 monster dies per move.
        #Note2: An exception doesn't do much here.  If the monster A kills
        #monster B, the exception that monster B is killed is raised before
        #all the work is done for moving monster A.
        for i in range(len(self.creature_links)-1, -1, -1):
            pos_x, pos_y = self.creature_links[i]
            try:
                new_x, new_y = self.items[pos_x][pos_y].move(pos_x, pos_y)
            except MonsterKilled as exc:
                self.creature_links.splice(i, 1)
                self._set_creature_links()
            except PlayerKilled as exc:
                raise exc
            except as e:
                console.log('MM Error'+pos_x+','+pos_y+' '+e)

    def switch_green_doors(self):
        for pos_x, pos_y in self.links['GREEN_BUTTON']:
            self.map[pos_x][pos_y].flip_wall()

    def turn_tanks(self):
        for pos_x, pos_y in self.creature_links:
            if self.items[pos_x][pos_y] instanceof Tank:
                self.items[pos_x][pos_y].trigger()


    def get_teleport_ind(self, pos_x, pos_y):
        #get the ind of the current teleport
        ind = -1
        for i in range(len(self.links['TELEPORTS'])):
            tel_x, tel_y = self.links['TELEPORTS'][i]
            if tel_x == pos_x and tel_y == pos_y:
                ind = i
                break

        return ind


    def get_teleport_pos(self, ind):
        return self.links['TELEPORTS'][ind]


    def get_next_teleport_ind(self, ind):
        pre_ind = ind - 1
        if pre_ind < 0:
            pre_ind = len(self.links['TELEPORTS']) + pre_ind
        return pre_ind


    def get_num_teleports(self):
        return len(self.links['TELEPORTS'])


    def get_next_teleport(self, pos_x, pos_y):
        #TODO: Can this be on the object?
        ind = self.get_teleport_ind(pos_x, pos_y)

        if ind < 0:
            return None, None

        if ind == 0:
            pre_ind = len(self.links['TELEPORTS']) - 1
        else:
            pre_ind = ind - 1

        return self.get_teleport_pos(pre_ind)


    def have_all_chips(self):
        if self.chips_left > 0:
            return False
        else:
            return True


    def reset_inventory_ui(self):
        items = document.getElementsByClassName('item')
        for item in items:
            item.style.backgroundImage = ''
        

    def set_chips_text(self):
        chips_div = document.getElementById('count')
        num_chars = 3
        pad = new Array(1 + num_chars).join('0');
        chips_text = (pad + self.chips_left).slice(-pad.length);
        chips_div.innerHTML = chips_text


    def get_chip(self):
        self.chips_left -= 1
        self.set_chips_text()


    def move_player(self, key_direction):
        direction = direction_dpos_dict[key_direction]
        player_item = self.items[self.x][self.y]

        #This might raise a PlayerKilled Exception
        player_item.valid_move(self.x, self.y, direction, None)

        if self.game_state == FINISHED:
            self.controller.new_level(True)

    def run_slips(self):
        #slip the player
        i = 0
        more_items_to_slip = i < len(self.slip_list)

        while more_items_to_slip:
            #get the item
            pos_x, pos_y, direction = self.slip_list[i]
            slip_item = self.items[pos_x][pos_y]

            #try to slip the item
            valid_move, new_x, new_y = slip_item.valid_move(pos_x, pos_y,
                                                            direction, i)

            #go to the next item in the list
            i += 1
            more_items_to_slip = i < len(self.slip_list)


    def update(self):
        # Make model updates
        self.draw()


    def draw(self):
         self.refresh()

        
    def refresh(self):
        startX = Math.min( Math.max(0,self.x-PLAYERPOS), LEVELSIZE-NUM_BLOCKS)
        startY = Math.min( Math.max(0,self.y-PLAYERPOS), LEVELSIZE-NUM_BLOCKS)
        ctx = self.canvas.getContext('2d')
        ctx.save()
        
        dispx = 0
        for map_x in range(startX, startX+NUM_BLOCKS):
            dispy = 0
            for map_y in range(startY, startY+NUM_BLOCKS):
                #draw the map first
                if self.map[map_x][map_y]:
                    self.map[map_x][map_y].draw(ctx, dispx, dispy)
                if self.items[map_x][map_y]:
                    self.items[map_x][map_y].draw(ctx, dispx, dispy)
                dispy += BLOCK_DIM
            
            dispx += BLOCK_DIM
        ctx.restore()
