
class GameObject:
    """
    Basis for all objects in the game
    """
    def __init__(self):
        pass

    def draw(self, ctx, dispx, dispy):
        if self.bg_img:
            ctx.drawImage(self.bg_img, dispx, dispy)
        ctx.drawImage(self.img, dispx, dispy)


class MapObject(GameObject):
    """
    Base for objects drawn on the map
    """
    def __init__(self):
        self.dmg_type = None
        self.item = None
        
    def leavable(self, start_x, start_y, dx, dy, map, items):
        """
        in charge of determinging if a player can move
        """
        new_x = start_x + dx
        new_y = start_y + dy
        creature = items[start_x][start_y]
        return map[new_x][new_y].enterable(new_x, new_y, dx, dy, items, creature)
        
    def enterable(self, pos_x, pos_y, dx, dy, items, creature):
        return True

    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        return pos_x, pos_y

    def slip_item(self, creature):
        if self.dmg_type != 'FORCE' and self.dmg_type != 'ICE' and self.dmg_type != 'TELEPORT':
            return False
        return (not creature.is_safe(self.dmg_type, self.item))


class StaticMapObject(MapObject):
    """
    These are objects that never change on a map
    These include:
    #0    Empty Tile (Space)                   0    1
    #1    Wall                                 0    1
    #4    Fire                                 0    0
    #5    Hidden Wall (wont appear)            0    0
    #6    Blocked North                        0    0
    #7    Blocked West                         0    0
    #8    Blocked South                        0    0
    #9    Blocked East                         0    0
    #12    Ice                                 0    0
    #13    Force South (S)                     0    1
    #14    Cloning Block North (N)             0    0
    #15    Cloning Block West (W)              0    0
    #16    Cloning Block South (S)             0    0
    #17    Cloning Block East (E)              0    0
    #18    Force North (N)                     0    1
    #19    Force East (E)                      0    1
    #20    Force West (W)                      0    1
    #21    Exit                                0    1
    #26    South« East Ice Slide               0    0
    #27    South« West Ice Slide               0    0
    #28    North« West Ice Slide               0    0
    #29    North« East Ice Slide               0    0
    #33    Thief                               0    0
    #35    Green Button - doors                0    0
    #36    Red Button - cloning                0    0
    #39    Brown Button - Traps                0    0
    #40    Blue Button - Tanks                 0    0
    #41    Teleport                            0    0
    #43    Trap                                0    0
    #45    Gravel                              0    0
    #47    Hint                                0    0
    #48    Blocked South - East                0    0
    #49    Cloning Machine                     0    0
    #50    Force All Direction                 0    0
    #58    Exit - end game                     0    0
    #59    Exit - end game                     0    0
    """
    def __init__(self):
        pass
        
class Tile(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

class Wall(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def enterable(self, pos_x, pos_y, dx, dy, items, creature):
        #cannot enter this object
        return False

class Fire(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        
    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        creature.burn(game_engine, pos_x, pos_y)
        return pos_x, pos_y

class HiddenWall(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def enterable(self, pos_x, pos_y, dx, dy, items, creature):
        #cannot enter this object
        return False

class BlockedNorth(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

class BlockedWest(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

class BlockedSouth(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def leavable(self, start_x, start_y, dx, dy, map, items):
        """
        in charge of determinging if a player can move
        """
        if dy == 1:
            return False
        return MapObject.leavable(self, start_x, start_y, dx, dy, map, items)

class BlockedEast(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

class CloneNorth(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

class CloneWest(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

class CloneSouth(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

class CloneEast(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

class Theif(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        creature.clear_boots()
        return pos_x, pos_y

class ButtonGreen(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
    
    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        game_engine.switch_green_doors()
        return pos_x, pos_y

class ButtonRed(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.link = None
        self.game_engine = game_engine

    def set_trap(self, trap_x, trap_y):
        self.trap_x = trap_x
        self.trap_y = trap_y

    def link_cloner(self, cl_x, cl_y):
        self.link = [cl_x, cl_y]

    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        if self.link:
            cl_x, cl_y = self.link
            game_engine.map[cl_x][cl_y].clone(game_engine, cl_x, cl_y)
        return pos_x, pos_y

class ButtonBrown(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def set_trap(self, trap_x, trap_y):
        console.log('set_button')
        self.trap_x = trap_x
        self.trap_y = trap_y

    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        trap = game_engine.map[self.trap_x][self.trap_y]
        trap.open_trap()
        return pos_x, pos_y

class ButtonBlue(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        game_engine.turn_tanks()
        return pos_x, pos_y

class Trap(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.trapped = True
        self.game_engine = game_engine

    def leavable(self, start_x, start_y, dx, dy, map, items):
        """
        in charge of determinging if a player can move
        """
        if self.trapped:
            return False
        return MapObject.leavable(self, start_x, start_y, dx, dy, map, items)

    def open_trap(self):
        self.trapped = False

    def close_trap(self):
        self.trapped = True

class Gravel(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

class BlockedSE(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

class Cloner(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.images = images
        self.cloned_enum = None

    def clone(self, game_engine, x, y):
        if game_engine.items[x][y] is None:
            game_engine.items[x][y] = object_generator(self.cloned_enum,
                                                       self.images)
            game_engine.creature_links.push([x, y])
            game_engine._set_creature_links()

    def set_cloned(self, items, cloned_enum, x, y):
        """
        Set item that should be cloned on the cloner
        """
        if self.cloned_enum is not None:
            #if it's already set, return
            return
        #a little tricky, but I think it's good use of bg_img and img
        self.bg_img = self.img
        self.img = self.images[cloned_enum]
        #save this to generate new copies of the object
        self.cloned_enum = cloned_enum
        #set the item to None, it will be drawn here
        items[x][y] = None

class Teleport(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.dmg_type = 'TELEPORT'

    def get_slip_dir(self, dx, dy):
        return dx, dy

    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        i = 0
        num_teleports = 4 #TODO: Code this
        t_ind = game_engine.get_teleport_ind(pos_x, pos_y)
        while i < (num_teleports-1):
            #make sure the move will work
            t_ind = game_engine.get_next_teleport_ind(t_ind)
            t_x, t_y = game_engine.get_teleport_pos(t_ind)

            map = game_engine.map
            items = game_engine.items
            #This is not needed since test=True
            slip_ind = None
            valid = creature.valid_move(t_x, t_y, dx, dy, map, items,
                                        game_engine, slip_ind, test=True)[0]
            if valid:
                #Move item from the new position to the transported position
                return t_x, t_y
            i += 1

        #TODO: Slide in the reverse direction
        console.log('Not Implemented ' + a)
        return pos_x, pos_y


class SlidingFloor(MapObject):
    def __init__(self):
        pass

class ForceFloor(SlidingFloor):
    def __init__(self):
        self.dmg_type = 'FORCE'
        self.item = 'INV_SUCTIONBOOTS'

class ForceAll(ForceFloor):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

class ForceNorth(ForceFloor):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
            
    def get_slip_dir(self, dx, dy):
        return 0, -1

class ForceEast(ForceFloor):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
            
    def get_slip_dir(self, dx, dy):
        return 1, 0

class ForstWest(ForceFloor):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def get_slip_dir(self, dx, dy):
        return -1, 0

class ForceSouth(ForceFloor):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
            
    def get_slip_dir(self, dx, dy):
        return 0, 1

class IceFloor(SlidingFloor):
    def __init__(self):
        self.dmg_type = 'ICE'
        self.item = 'INV_SKATES'

class Ice(IceFloor):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def get_slip_dir(self, dx, dy):
        return dx, dy

class IceSE(IceFloor):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def enterable(self, pos_x, pos_y, dx, dy, items, creature):
        if dx == 1 or dy == 1:
            return False
        else:
            return True
            
    def get_slip_dir(self, dx, dy):
        if dx == -1 and dy == 0:
            return 0, 1
        elif dx == 0 and dy == -1:
             return 1, 0
        return dx, dy

class IceSW(IceFloor):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def enterable(self, pos_x, pos_y, dx, dy, items, creature):
        if dx == -1 or dy == 1:
            return False
        else:
            return True
            
    def get_slip_dir(self, dx, dy):
        if dx == 1 and dy == 0:
            return 0, 1
        elif dx == 0 and dy == -1:
             return -1, 0
        return dx, dy

class IceNW(IceFloor):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def enterable(self, pos_x, pos_y, dx, dy, items, creature):
        if dx == -1 or dy == -1:
            return False
        else:
            return True
            
    def get_slip_dir(self, dx, dy):
        if dx == 1 and dy == 0:
            return 0, -1
        elif dx == 0 and dy == 1:
             return -1, 0
        return dx, dy

class IceNE(IceFloor):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def enterable(self, pos_x, pos_y, dx, dy, items, creature):
        if dx == 1 or dy == -1:
            return False
        else:
            return True
            
    def get_slip_dir(self, dx, dy):
        if dx == -1 and dy == 0:
            return 0, -1
        elif dx == 0 and dy == 1:
             return 1, 0
        return dx, dy



class Hint(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine


class Exit(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        game_engine.game_state = FINISHED
        return pos_x, pos_y


class DynamicMapObject(MapObject):
    """
    #2    Computer Chip                        0    1 - consume
    #100    Blue Key                           0    1 - consume
    #101    Red Key                            0    1 - consume
    #102    Green Key                          0    1 - consume
    #103    Yellow Key                         0    1 - consume
    #104    Flippers                           0    0 - consume
    #105    Fire Boots                         0    0 - consume
    #106    Ice Skates                         0    0 - consume
    #107    Suction Boots                      0    0 - consume
    
    #3    Water                                0    0 - to dirt
    
    #31    Blue Block, becomes Wall            0    0 - draw wall
    #44    Invisible Wall (Will appear)        0    0 - to wall
    #46    Pass Wall                           0    0 - to wall
    
    #11    Dirt                                0    0 - to tile
    #22    Blue Door                           0    1 - to tile
    #23    Red Door                            0    1 - to tile
    #24    Green Door                          0    1 - to tile
    #25    Yellow Door                         0    1 - to tile
    #34    Socket                              0    1 - to tile
    #30    Blue Block, becomes Tile            0    0 - to tile
    #42    Bomb                                0    0 - to tile

    #37    SwitchedWall, Closed                0    0 - draw open
    #38    SwitchedWall, Open                  0    0 - draw close
    """
    def __init__(self):
        pass


class Consumeable(MapObject):
    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        #replace the chip with a tile
        new_obj = object_generator(0, game_engine.images)
        game_engine.map[pos_x][pos_y] = new_obj
        creature.add_inventory(self.item_name, self)
        return pos_x, pos_y

class Chip(Consumeable):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.item_name = 'CHIP'
    
    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        game_engine.get_chip()
        return Consumeable.enter(self, game_engine, pos_x, pos_y, dx, dy, creature)

class Key(Consumeable):
    def __init__(self):
        pass

class KeyBlue(Key):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.item_name = 'KEY_BLUE'
        self.div_name = 'blue'

class KeyRed(Key):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.item_name = 'KEY_RED'
        self.div_name = 'red'

class KeyGreen(Key):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.item_name = 'KEY_GREEN'
        self.div_name = 'green'

class KeyYellow(Key):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.item_name = 'KEY_YELLOW'
        self.div_name = 'yellow'

class Flippers(Consumeable):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.item_name = 'INV_FLIPPERS'

class FireBoots(Consumeable):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.item_name = 'INV_FIREBOOTS'

class Skates(Consumeable):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.item_name = 'INV_SKATES'

class SuctionBoots(Consumeable):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.item_name = 'INV_SUCTIONBOOTS'


class Door(MapObject):
    def __init__(self):
        pass
        
    def enterable(self, pos_x, pos_y, dx, dy, items, creature):
        return creature.check_inventory(self.key, self.count)
    
    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        #use the inventory:
        if self.use_item:
            creature.use_item(self.key)
        
        #replace the chip with a tile
        new_obj = object_generator(0, game_engine.images)
        game_engine.map[pos_x][pos_y] = new_obj
        return pos_x, pos_y


class DoorBlue(Door):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.key = 'KEY_BLUE'
        self.use_item = True
        self.count = 1

class DoorRed(Door):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.key = 'KEY_RED'
        self.use_item = True
        self.count = 1

class DoorGreen(Door):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.key = 'KEY_GREEN'
        self.use_item = False #this key is special
        self.count = 1

class DoorYellow(Door):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.key = 'KEY_YELLOW'
        self.use_item = True
        self.count = 1



class ClerableMap(MapObject):
    def __init__(self):
        pass
    
    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        #replace this item with a tile
        new_obj = object_generator(0, game_engine.images)
        game_engine.map[pos_x][pos_y] = new_obj
        return pos_x, pos_y
    

class Socket(ClerableMap):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine
        self.game_engine = game_engine
    
    def enterable(self, pos_x, pos_y, dx, dy, items, creature):
        if self.game_engine.have_all_chips():
            return True
        else:
            return False

class Dirt(ClerableMap):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

class BlueNone(ClerableMap):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine



class Water(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        creature.drown(game_engine, pos_x, pos_y)
        return pos_x, pos_y


class BecomeWall(MapObject):
    def __init__(self):
        pass
        
    def enterable(self, pos_x, pos_y, dx, dy, items, creature):
        if creature.can_push_on_walls:
            #replace the chip with a tile
            new_obj = object_generator(1, game_engine.images, self.game_engine)
            self.game_engine.map[pos_x][pos_y] = new_obj
        return False

class BlueWall(BecomeWall):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

class SemiHiddenWall(BecomeWall):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine


class PassWall(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        #replace this item with a tile
        new_obj = object_generator(1, game_engine.images)
        game_engine.map[pos_x][pos_y] = new_obj
        return pos_x, pos_y

    def enterable(self, pos_x, pos_y, dx, dy, items, creature):
        #TODO: Block Monsters, and maybe Blocks
        return True


class Bomb(ClerableMap):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.img = images[type_index]
        self.game_engine = game_engine

    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature):
        ClerableMap.enter(self, game_engine, pos_x, pos_y, dx, dy, creature)
        #bombs shoud also kill the object
        game_engine.items[pos_x][pos_y] = None
        creature.kill('exploded')
        return pos_x, pos_y


class SwitchedWall(MapObject):
    def __init__(self, type_index, images, bg_img, game_engine):
        self.bg_img = bg_img
        self.game_engine = game_engine
        self.closed = type_index == 37
        self.closed_img = images[37]
        self.open_img = images[38]
        self.set_image()
    
    def set_image(self):
        if self.closed:
            self.img = self.closed_img
        else:
            self.img = self.open_img

    def flip_wall(self):
        self.closed = not self.closed
        self.set_image()
        
    def enterable(self, pos_x, pos_y, dx, dy, items, creature):
        return not self.closed
