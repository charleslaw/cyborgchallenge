
class GameObject:
    """
    Basis for all objects in the game
    """
    def __init__(self):
        pass

    def draw(self, ctx, dispx, dispy):
        if self.bg_img:
            ctx.drawImage(self.bg_img, dispx, dispy)
        ctx.drawImage(self.img, dispx, dispy)
        
    

class MapObject(GameObject):
    """
    Base for objects drawn on the map
    """
    def __init__(self):
        pass
        
    def leavable(self, start_x, start_y, dx, dy, map, items, game_engine):
        """
        in charge of determinging if a player can move
        """
        new_x = start_x + dx
        new_y = start_y + dy
        creature = items[start_x][start_y]
        return map[new_x][new_y].enterable(dx, dy, items, creature, game_engine)
        
    def enterable(self, dx, dy, items, creature, game_engine):
        return True

    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature, slip_ind):
        #TODO: remove from sliplist
        creature.remove_from_sliplist(game_engine, slip_ind, pos_x, pos_y, dx, dy)
        return
        
    def update_slips(self, slip_item, index, pos_x, pos_y, dx, dy, game_engine):
        """
        Assume a non-slippery surface, so remove the item from the sliplist
        """
        console.log('AA' + pos_x + ' ' + pos_y)
        if index != None:
            #remove the item from the slip list
            game_engine.slip_list.pop(index)


class StaticMapObject(MapObject):
    """
    These are objects that never change on a map
    These include:
    #0    Empty Tile (Space)                   0    1
    #1    Wall                                 0    1
    #4    Fire                                 0    0
    #5    Hidden Wall (wont appear)            0    0
    #6    Blocked North                        0    0
    #7    Blocked West                         0    0
    #8    Blocked South                        0    0
    #9    Blocked East                         0    0
    #12    Ice                                 0    0
    #13    Force South (S)                     0    1
    #14    Cloning Block North (N)             0    0
    #15    Cloning Block West (W)              0    0
    #16    Cloning Block South (S)             0    0
    #17    Cloning Block East (E)              0    0
    #18    Force North (N)                     0    1
    #19    Force East (E)                      0    1
    #20    Force West (W)                      0    1
    #21    Exit                                0    1
    #26    South« East Ice Slide               0    0
    #27    South« West Ice Slide               0    0
    #28    North« West Ice Slide               0    0
    #29    North« East Ice Slide               0    0
    #33    Thief                               0    0
    #35    Green Button - doors                0    0
    #36    Red Button - cloning                0    0
    #39    Brown Button - Traps                0    0
    #40    Blue Button - Tanks                 0    0
    #41    Teleport                            0    0
    #43    Trap                                0    0
    #45    Gravel                              0    0
    #47    Hint                                0    0
    #48    Blocked South - East                0    0
    #49    Cloning Machine                     0    0
    #50    Force All Direction                 0    0
    #58    Exit - end game                     0    0
    #59    Exit - end game                     0    0
    """
    def __init__(self):
        pass
        
class Tile(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class Wall(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

    def enterable(self, dx, dy, items, creature, game_engine):
        #cannot enter this object
        return False

class Fire(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        
    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature, slip_ind):
        creature.burn(game_engine, pos_x, pos_y)

class HiddenWall(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class BlockedNorth(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class BlockedWest(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class BlockedSouth(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class BlockedEast(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class CloneNorth(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class CloneWest(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class CloneSouth(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class CloneEast(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class Theif(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class ButtonGreen(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class ButtonRed(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class ButtonBrown(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class ButtonBlue(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class Trap(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class Gravel(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class BlockedSE(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class Cloner(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img


class Teleport(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img



class SlidingFloor(MapObject):
    def __init__(self):
        pass

    def update_slips(self, slip_item, index, pos_x, pos_y, dx, dy, game_engine):
        """
        See if this item will slip on this surface
        """
        dx, dy = self.get_slip_dir(dx, dy)
        
        #if new_floor.is_slippery_for_item(slip_item):
        is_slippery = not slip_item.is_safe(self.dmg_type, self.item)
        
        if is_slippery:
            #Add/update sliplist information
            slip_item.add_to_sliplist(game_engine, index, pos_x, pos_y, dx, dy)
    
    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature, slip_ind):
        #if this is a manual move, add to the sliplist
        console.log('AA' + creature + ' ' + slip_ind)
        
        dx, dy = self.get_slip_dir(dx, dy)
        is_slippery = not creature.is_safe(self.dmg_type, self.item)
        if is_slippery:
            creature.add_to_sliplist(game_engine, slip_ind, pos_x, pos_y, dx, dy)
        else:
            creature.remove_from_sliplist(game_engine, slip_ind, pos_x, pos_y, dx, dy)

class ForceFloor(SlidingFloor):
    def __init__(self):
        self.dmg_type = 'FORCE'
        self.item = 'INV_SUCTIONBOOTS'

class ForceAll(ForceFloor):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class ForceNorth(ForceFloor):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
            
    def get_slip_dir(self, dx, dy):
        return 0, -1

class ForceEast(ForceFloor):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
            
    def get_slip_dir(self, dx, dy):
        return 1, 0

class ForstWest(ForceFloor):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
            
    def get_slip_dir(self, dx, dy):
        return -1, 0

class ForceSouth(ForceFloor):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
            
    def get_slip_dir(self, dx, dy):
        return 0, 1

class IceFloor(SlidingFloor):
    def __init__(self):
        self.dmg_type = 'ICE'
        self.item = 'INV_SKATES'

class Ice(IceFloor):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        
    def get_slip_dir(self, dx, dy):
        return dx, dy

class IceSE(IceFloor):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        
    def enterable(self, dx, dy, items, creature, game_engine):
        if dx == 1 or dy == 1:
            return False
        else:
            return True
            
    def get_slip_dir(self, dx, dy):
        if dx == -1 and dy == 0:
            return 0, 1
        elif dx == 0 and dy == -1:
             return 1, 0
        return dx, dy

class IceSW(IceFloor):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        
    def enterable(self, dx, dy, items, creature, game_engine):
        if dx == -1 or dy == 1:
            return False
        else:
            return True
            
    def get_slip_dir(self, dx, dy):
        if dx == 1 and dy == 0:
            return 0, 1
        elif dx == 0 and dy == -1:
             return -1, 0
        return dx, dy

class IceNW(IceFloor):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        
    def enterable(self, dx, dy, items, creature, game_engine):
        if dx == -1 or dy == -1:
            return False
        else:
            return True
            
    def get_slip_dir(self, dx, dy):
        if dx == 1 and dy == 0:
            return 0, -1
        elif dx == 0 and dy == 1:
             return -1, 0
        return dx, dy

class IceNE(IceFloor):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
    
    def enterable(self, dx, dy, items, creature, game_engine):
        if dx == 1 or dy == -1:
            return False
        else:
            return True
            
    def get_slip_dir(self, dx, dy):
        if dx == -1 and dy == 0:
            return 0, -1
        elif dx == 0 and dy == 1:
             return 1, 0
        return dx, dy



class Hint(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        

class Exit(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
    
    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature, slip_ind):
        game_engine.game_state = FINISHED


class DynamicMapObject(MapObject):
    """
    #2    Computer Chip                        0    1 - consume
    #100    Blue Key                           0    1 - consume
    #101    Red Key                            0    1 - consume
    #102    Green Key                          0    1 - consume
    #103    Yellow Key                         0    1 - consume
    #104    Flippers                           0    0 - consume
    #105    Fire Boots                         0    0 - consume
    #106    Ice Skates                         0    0 - consume
    #107    Suction Boots                      0    0 - consume
    
    #3    Water                                0    0 - to dirt
    #11    Dirt                                0    0 - to tile
    #22    Blue Door                           0    1 - to tile
    #23    Red Door                            0    1 - to tile
    #24    Green Door                          0    1 - to tile
    #25    Yellow Door                         0    1 - to tile
    #30    Blue Block, becomes Tile            0    0 - draw tile
    #31    Blue Block, becomes Wall            0    0 - draw wall
    #34    Socket                              0    1 - consume
    #37    Switch Block, Closed                0    0 - draw open
    #38    Switch Block, Open                  0    0 - draw close
    #42    Bomb                                0    0 - explode
    #44    Invisible Wall (Will appear)        0    0 - become wall
    #46    Pass Wall                           0    0 - become wall
    """
    def __init__(self):
        pass


class Consumeable(MapObject):
    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature, slip_ind):
        #replace the chip with a tile
        new_obj = object_generator(0, game_engine.images)
        game_engine.map[pos_x][pos_y] = new_obj
        creature.add_inventory(self.item_name)

class Chip(Consumeable):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        self.item_name = 'CHIP'
    
    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature, slip_ind):
        game_engine.get_chip()
        Consumeable.enter(self, game_engine, pos_x, pos_y, dx, dy, creature)

class KeyBlue(Consumeable):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        self.item_name = 'KEY_BLUE'

class KeyRed(Consumeable):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        self.item_name = 'KEY_RED'

class KeyGreen(Consumeable):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        self.item_name = 'KEY_GREEN'

class KeyYellow(Consumeable):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        self.item_name = 'KEY_YELLOW'

class Flippers(Consumeable):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        self.item_name = 'INV_FLIPPERS'

class FireBoots(Consumeable):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        self.item_name = 'INV_FIREBOOTS'

class Skates(Consumeable):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        self.item_name = 'INV_SKATES'

class SuctionBoots(Consumeable):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        self.item_name = 'INV_SUCTIONBOOTS'


class Door(MapObject):
    def __init__(self):
        pass
        
    def enterable(self, dx, dy, items, creature, game_engine):
        return creature.check_inventory(self.key, self.count)
    
    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature, slip_ind):
        #use the inventory:
        if self.use_item:
            creature.use_item(self.key)
        
        #replace the chip with a tile
        new_obj = object_generator(0, game_engine.images)
        game_engine.map[pos_x][pos_y] = new_obj


class DoorBlue(Door):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        self.key = 'KEY_BLUE'
        self.use_item = True
        self.count = 1

class DoorRed(Door):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        self.key = 'KEY_RED'
        self.use_item = True
        self.count = 1

class DoorGreen(Door):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        self.key = 'KEY_GREEN'
        self.use_item = False #this key is special
        self.count = 1

class DoorYellow(Door):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        self.key = 'KEY_YELLOW'
        self.use_item = True
        self.count = 1



class ClerableMap(MapObject):
    def __init__(self):
        pass
    
    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature, slip_ind):
        #replace this item with a tile
        new_obj = object_generator(0, game_engine.images)
        game_engine.map[pos_x][pos_y] = new_obj

    

class Socket(ClerableMap):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
    
    def enterable(self, dx, dy, items, creature, game_engine):
        if game_engine.have_all_chips():
            return True
        else:
            return False

class Dirt(ClerableMap):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img




class Water(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

    def enter(self, game_engine, pos_x, pos_y, dx, dy, creature, slip_ind):
        creature.drown(game_engine, pos_x, pos_y)
        

class BlueNone(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class BlueWall(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class SwitchedWall(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class SwitchedNone(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class Bomb(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img
        
class SemiHiddenWall(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

class PassWall(MapObject):
    def __init__(self, img, bg_img):
        self.bg_img = bg_img
        self.img = img

