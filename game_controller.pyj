#   Copyright 2012 Charles Law (charles.law@gmail.com)
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

import game_model
import level_loader

FPS = 20 #20 supports "boosting" @ 20 moves/sec
INIT = 0
READY = 1
RUNNING = 2


class Controller:
    def __init__(self, game_engine):
        self.game_engine = game_engine

        self.key_up = False
        self.key_down = False
        self.key_left = False
        self.key_right = False
        self.key_fire = False
        
        
        #state parameters
        self.state = INIT
        self.queue_move = None
        self.used_move = False
        
        #Load images & levels
        self.levels_finished_loading = False
        LevelLoader(self, 'full.txt')
        
        self.images_finished_loading = False
        self.load_images()
        
        
    def load_images(self)
        self.number_images_loaded = 0

        #Load images
        self.img = [new Image() for image in image_map]
        num_images = len(image_map)
        main = self
        for i in range(len(image_map)):
            if image_map[i].indexOf('.') < 0:
                num_images -= 1
            else:
                self.img[i].src = './images/' + image_map[i]
                self.img[i].onload = def():
                    main.number_images_loaded += 1
                    if main.number_images_loaded >= num_images:
                        main.images_loaded()


    def images_loaded(self):
        console.log('ImagesLoaded')
        self.images_finished_loading = True
        if self.levels_finished_loading:
            self.level_num = 6
            self.start_current_level()
        

    def level_loaded(self, level_set):
        console.log('LevelsLoaded')
        self.level_set = level_set
        self.levels_finished_loading = True
        if self.images_finished_loading:
            self.level_num = 1
            self.start_current_level()


    def read_level_set(self, level_num):
        map = new Array(LEVELSIZE)
        items = new Array(LEVELSIZE)
        links = {'GREEN_BUTTON': []}
        
        for i in range(LEVELSIZE):
            map[i] = new Array(LEVELSIZE)
            items[i] = new Array(LEVELSIZE)
            
        #get level info
        layer_one, layer_two, level_info = self.level_set.getLevel(level_num)
        
        start_pos = [0, 0]

        #read the layers into the map & items
        for i in range(LEVELSIZE):
            for j in range(LEVELSIZE):
            
                item_enum = 0
                floor_enum = 0
                
                if enum_is_item(layer_one[i][j]):
                    if item_enum:
                        console.log("Bad Level")
                        raise Exception
                    else:
                        item_enum = layer_one[i][j]

                    if not enum_is_item(layer_two[i][j]):
                        floor_enum = layer_two[i][j]
                else:
                    floor_enum = layer_one[i][j]
                    
                
                if item_enum == 110:
                    start_pos = [j, i]

                if item_enum and not enum_is_monster(item_enum):
                    items[j][i] = object_generator(item_enum, self.img)
                else:
                    items[j][i] = None
                map[j][i] = object_generator(floor_enum, self.img)
                if floor_enum == 37 or floor_enum == 38:
                    links['GREEN_BUTTON'].append((j, i))
                #console.log('A ' + layer_one[i][j] + ' ' + layer_two[i][j])
                
        return start_pos, map, items, links, level_info


    def start_current_level(self):
        start_pos, map, items, links, level_info = self.read_level_set(self.level_num)
        self.game_engine.start_level(self, start_pos, map, items, level_info, self.img, links)
        self.state = READY
        
        #draw the game before the user starts playing & refresh is turned on
        self.update()
        
    
    def new_level(self, incriment):
        clearInterval(self.timer_id)
        
        if incriment:
            self.level_num += 1
        self.start_current_level()


    def keyboard_input(self, direction):
        if not self.queue_move:
            if self.used_move:
                self.queue_move = direction
            else:
                self.game_engine.move_player(direction)
                self.used_move = True
 
        if self.state == READY:
            self.half_speed_marker = False
            self.quarter_speed_marker = False
            self.state = RUNNING

            #setup a timer
            main = self
            self.timer_id = setInterval(def():
                main.update()
            , 1000/FPS)


    def update(self):
        if self.state < READY:
            return

        if self.half_speed_marker:
            self.half_speed_updates()
            self.half_speed_marker = False
        else:
            self.half_speed_marker = True
            
        self.game_engine.update()
        

    def half_speed_updates(self):
        """
        10 m/s updates
        """
        if self.quarter_speed_marker:
            self.quarter_speed_updates()
            self.quarter_speed_marker = False
        else:
            self.quarter_speed_marker = True
            
        self.game_engine.run_slips()


    def quarter_speed_updates(self):
        """
        5 m/s updates:
        - keyboard
        """
        if self.queue_move:
            self.game_engine.move_player(self.queue_move)
            self.queue_move = None
            self.used_move = True
        else:
            self.used_move = False #reset inputs
 

