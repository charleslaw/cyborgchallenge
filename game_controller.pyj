#   Copyright 2012 Charles Law (charles.law@gmail.com)
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

import game_model
import level_loader
import game_exceptions

FPS = 20 #20 supports "boosting" @ 20 moves/sec
INIT = 0
READY = 1
RUNNING = 2
DEAD = 3


class Controller:
    def __init__(self, game_engine):
        self.game_engine = game_engine

        self.key_up = False
        self.key_down = False
        self.key_left = False
        self.key_right = False
        self.key_fire = False
        self.pressed_key = None
        
        
        #state parameters
        self.state = INIT
        
        #Load images & levels
        self.levels_finished_loading = False
        LevelLoader(self, 'full.txt')
        
        self.images_finished_loading = False
        self.load_images()
        
        
    def load_images(self):
        self.number_images_loaded = 0

        #Load images
        self.img = [new Image() for image in image_map]
        num_images = len(image_map)
        for i in range(len(image_map)):
            if image_map[i].indexOf('.') < 0:
                num_images -= 1
            else:
                self.img[i].src = './images/' + image_map[i]
                self.img[i].onload = def():
                    self.number_images_loaded += 1
                    if self.number_images_loaded >= num_images:
                        self.images_loaded()


    def images_loaded(self):
        console.log('ImagesLoaded')
        self.images_finished_loading = True
        if self.levels_finished_loading:
            self._start_game()


    def _start_game(self):
        self.level_num = 1
        self.start_current_level()


    def level_loaded(self, level_set):
        console.log('LevelsLoaded')
        self.level_set = level_set
        self.levels_finished_loading = True
        if self.images_finished_loading:
            self._start_game()


    def read_level_set(self, level_num):
        map = Array(LEVELSIZE)
        items = Array(LEVELSIZE)
        links = {'GREEN_BUTTON': [],
                 'TELEPORTS': []}
        
        for i in range(LEVELSIZE):
            map[i] = Array(LEVELSIZE)
            items[i] = Array(LEVELSIZE)
            
        #get level info
        layer_one, layer_two, level_info, creature_links, trap_controls, clone_controles = self.level_set.getLevel(level_num)
        
        start_pos = [0, 0]

        #read the layers into the map & items
        for y in range(LEVELSIZE):
            for x in range(LEVELSIZE):
            
                item_enum = 0
                floor_enum = 0
                
                if enum_is_item(layer_one[y][x]):
                    if item_enum:
                        console.log("Bad Level")
                        raise Exception
                    else:
                        item_enum = layer_one[y][x]

                    if not enum_is_item(layer_two[y][x]):
                        floor_enum = layer_two[y][x]
                else:
                    floor_enum = layer_one[y][x]
                    
                
                if item_enum == 110:
                    start_pos = [x, y]
                    #start_pos = [28, 9]
                    #item_enum = None

                if item_enum:
                    items[x][y] = object_generator(item_enum, self.img, self.game_engine)
                else:
                    items[x][y] = None
                map[x][y] = object_generator(floor_enum, self.img, self.game_engine)

                #save links
                #TODO: Use dicts here
                if floor_enum == 37 or floor_enum == 38:
                    links['GREEN_BUTTON'].push([x, y])
                
                elif floor_enum == 41:
                    links['TELEPORTS'].push([x, y])

        #TODO: Figure out a good palce to filter out creature links that have
        #creatures on clone blocks.  This just makes the game more efficient
        #and should not actually affect gameplay

        #create a copy of the creature links
        creature_links_copy = []
        for creature_link in creature_links:
            #reverse the order of the array
            creature_links_copy.unshift(creature_link)

        for clonelink in clone_controles:
            but_xpos, but_ypos, cloner_xpos, cloner_ypos = clonelink
            #TODO: Check this assumption, make sure it's always layer_one
            cloned_enum = layer_one[cloner_ypos][cloner_xpos]
            map[cloner_xpos][cloner_ypos].set_cloned(items, cloned_enum,
                                                     cloner_xpos, cloner_ypos)
            map[but_xpos][but_ypos].link_cloner(cloner_xpos, cloner_ypos)

        #This is cleanup, make sure the cloned items are not on the monster list
        for i in range(len(creature_links_copy)-1, -1, -1):
            x, y = creature_links_copy[i]
            if items[x][y] == None:
                creature_links_copy.splice(i, 1)

        return start_pos, map, items, links, level_info, creature_links_copy, trap_controls, clone_controles


    def start_current_level(self):
        start_pos, map, items, links, level_info, creature_links, trap_controls, clone_controles = self.read_level_set(self.level_num)
        self.game_engine.start_level(self, start_pos, map, items, level_info, self.img, links, creature_links, trap_controls, clone_controles)
        self.state = READY
        self.queue_move = None
        self.used_move = False

        #draw the game before the user starts playing & refresh is turned on
        self.update()
    
    def new_level(self, incriment):
        clearInterval(self.timer_id)
        
        if incriment:
            self.level_num += 1
            if self.level_num > self.level_set.get_num_levels():
                self.game_engine.end_game()
                return
        self.start_current_level()


    def keyboard_input(self, direction, set):
        if set:
            self.made_move = direction
            if not self.pressed_key:
                self.press_delay = True
                self.just_pressed = True
                self.hold_delay = 2
            self.pressed_key = direction
        else:
            self.pressed_key = None
            self.press_delay = False
            self.just_pressed = False
            self.hold_delay = 0

        if self.state == READY:
            self.half_speed_marker = False
            self.quarter_speed_marker = False
            self.state = RUNNING

            #setup a timer
            self.timer_id = setInterval(def():
                self.update()
            , 1000/FPS)


    def update(self):
        try:
            if self.state < READY or self.state == DEAD:
                return

            if self.state == RUNNING:
                if self.half_speed_marker:
                    self.half_speed_updates()
                    self.half_speed_marker = False
                else:
                    self.half_speed_marker = True
        except PlayerKilled as exc:
            self.state = DEAD
            Alertify.dialog.alert(
                exc.msg,
                def ():
                    self.new_level(False)
                )

        self.game_engine.update()


    def half_speed_updates(self):
        """
        10 m/s updates
        """
        if self.made_move:
            pressed_key = self.made_move
        else:
            pressed_key = self.pressed_key
        
        if self.quarter_speed_marker:
            self.quarter_speed_updates()
            self.quarter_speed_marker = False
        else:
            if pressed_key and (self.just_pressed or not self.hold_delay):
                if not self.queue_move:
                    if self.used_move:
                        self.queue_move = pressed_key
                    else:
                        self.game_engine.move_player(pressed_key)
                        self.used_move = True
                        if self.just_pressed:
                            self.just_pressed = False
            if self.game_engine.is_player_sliding():
                self.used_move = False
                self.just_pressed = False
                if self.hold_delay:
                    self.hold_delay -= 1
            self.quarter_speed_marker = True
            self.made_move = None
            self.game_engine.run_slips()


    def quarter_speed_updates(self):
        """
        5 m/s updates:
        - keyboard
        """
        if self.made_move:
            pressed_key = self.made_move
        else:
            pressed_key = self.pressed_key

        if self.hold_delay:
            self.hold_delay -= 1

        if self.queue_move:
            self.game_engine.move_player(self.queue_move)
            self.queue_move = None
            self.used_move = True
        elif pressed_key and (self.just_pressed or not self.hold_delay):
            self.game_engine.move_player(pressed_key)
            self.used_move = True
        else:
            self.used_move = False #reset inputs
        self.just_pressed = False
        self.game_engine.run_slips()
        self.game_engine.move_monsters()
        self.made_move = None


